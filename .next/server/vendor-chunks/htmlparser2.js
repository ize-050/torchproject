"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/htmlparser2";
exports.ids = ["vendor-chunks/htmlparser2"];
exports.modules = {

/***/ "(ssr)/./node_modules/htmlparser2/lib/CollectingHandler.js":
/*!***********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/CollectingHandler.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = CollectingHandler;\nfunction CollectingHandler(cbs) {\n    this._cbs = cbs || {};\n    this.events = [];\n}\nvar EVENTS = (__webpack_require__(/*! ./ */ \"(ssr)/./node_modules/htmlparser2/lib/index.js\").EVENTS);\nObject.keys(EVENTS).forEach(function(name) {\n    if (EVENTS[name] === 0) {\n        name = \"on\" + name;\n        CollectingHandler.prototype[name] = function() {\n            this.events.push([\n                name\n            ]);\n            if (this._cbs[name]) this._cbs[name]();\n        };\n    } else if (EVENTS[name] === 1) {\n        name = \"on\" + name;\n        CollectingHandler.prototype[name] = function(a) {\n            this.events.push([\n                name,\n                a\n            ]);\n            if (this._cbs[name]) this._cbs[name](a);\n        };\n    } else if (EVENTS[name] === 2) {\n        name = \"on\" + name;\n        CollectingHandler.prototype[name] = function(a, b) {\n            this.events.push([\n                name,\n                a,\n                b\n            ]);\n            if (this._cbs[name]) this._cbs[name](a, b);\n        };\n    } else {\n        throw Error(\"wrong number of arguments\");\n    }\n});\nCollectingHandler.prototype.onreset = function() {\n    this.events = [];\n    if (this._cbs.onreset) this._cbs.onreset();\n};\nCollectingHandler.prototype.restart = function() {\n    if (this._cbs.onreset) this._cbs.onreset();\n    for(var i = 0, len = this.events.length; i < len; i++){\n        if (this._cbs[this.events[i][0]]) {\n            var num = this.events[i].length;\n            if (num === 1) {\n                this._cbs[this.events[i][0]]();\n            } else if (num === 2) {\n                this._cbs[this.events[i][0]](this.events[i][1]);\n            } else {\n                this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);\n            }\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0NvbGxlY3RpbmdIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxrQkFBa0JDLEdBQUc7SUFDMUIsSUFBSSxDQUFDQyxJQUFJLEdBQUdELE9BQU8sQ0FBQztJQUNwQixJQUFJLENBQUNFLE1BQU0sR0FBRyxFQUFFO0FBQ3BCO0FBRUEsSUFBSUMsU0FBU0MsdUZBQW9CO0FBQ2pDQyxPQUFPQyxJQUFJLENBQUNILFFBQVFJLE9BQU8sQ0FBQyxTQUFTQyxJQUFJO0lBQ3JDLElBQUlMLE1BQU0sQ0FBQ0ssS0FBSyxLQUFLLEdBQUc7UUFDcEJBLE9BQU8sT0FBT0E7UUFDZFQsa0JBQWtCVSxTQUFTLENBQUNELEtBQUssR0FBRztZQUNoQyxJQUFJLENBQUNOLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDO2dCQUFDRjthQUFLO1lBQ3ZCLElBQUksSUFBSSxDQUFDUCxJQUFJLENBQUNPLEtBQUssRUFBRSxJQUFJLENBQUNQLElBQUksQ0FBQ08sS0FBSztRQUN4QztJQUNKLE9BQU8sSUFBSUwsTUFBTSxDQUFDSyxLQUFLLEtBQUssR0FBRztRQUMzQkEsT0FBTyxPQUFPQTtRQUNkVCxrQkFBa0JVLFNBQVMsQ0FBQ0QsS0FBSyxHQUFHLFNBQVNHLENBQUM7WUFDMUMsSUFBSSxDQUFDVCxNQUFNLENBQUNRLElBQUksQ0FBQztnQkFBQ0Y7Z0JBQU1HO2FBQUU7WUFDMUIsSUFBSSxJQUFJLENBQUNWLElBQUksQ0FBQ08sS0FBSyxFQUFFLElBQUksQ0FBQ1AsSUFBSSxDQUFDTyxLQUFLLENBQUNHO1FBQ3pDO0lBQ0osT0FBTyxJQUFJUixNQUFNLENBQUNLLEtBQUssS0FBSyxHQUFHO1FBQzNCQSxPQUFPLE9BQU9BO1FBQ2RULGtCQUFrQlUsU0FBUyxDQUFDRCxLQUFLLEdBQUcsU0FBU0csQ0FBQyxFQUFFQyxDQUFDO1lBQzdDLElBQUksQ0FBQ1YsTUFBTSxDQUFDUSxJQUFJLENBQUM7Z0JBQUNGO2dCQUFNRztnQkFBR0M7YUFBRTtZQUM3QixJQUFJLElBQUksQ0FBQ1gsSUFBSSxDQUFDTyxLQUFLLEVBQUUsSUFBSSxDQUFDUCxJQUFJLENBQUNPLEtBQUssQ0FBQ0csR0FBR0M7UUFDNUM7SUFDSixPQUFPO1FBQ0gsTUFBTUMsTUFBTTtJQUNoQjtBQUNKO0FBRUFkLGtCQUFrQlUsU0FBUyxDQUFDSyxPQUFPLEdBQUc7SUFDbEMsSUFBSSxDQUFDWixNQUFNLEdBQUcsRUFBRTtJQUNoQixJQUFJLElBQUksQ0FBQ0QsSUFBSSxDQUFDYSxPQUFPLEVBQUUsSUFBSSxDQUFDYixJQUFJLENBQUNhLE9BQU87QUFDNUM7QUFFQWYsa0JBQWtCVSxTQUFTLENBQUNNLE9BQU8sR0FBRztJQUNsQyxJQUFJLElBQUksQ0FBQ2QsSUFBSSxDQUFDYSxPQUFPLEVBQUUsSUFBSSxDQUFDYixJQUFJLENBQUNhLE9BQU87SUFFeEMsSUFBSyxJQUFJRSxJQUFJLEdBQUdDLE1BQU0sSUFBSSxDQUFDZixNQUFNLENBQUNnQixNQUFNLEVBQUVGLElBQUlDLEtBQUtELElBQUs7UUFDcEQsSUFBSSxJQUFJLENBQUNmLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ2MsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQzlCLElBQUlHLE1BQU0sSUFBSSxDQUFDakIsTUFBTSxDQUFDYyxFQUFFLENBQUNFLE1BQU07WUFFL0IsSUFBSUMsUUFBUSxHQUFHO2dCQUNYLElBQUksQ0FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUNDLE1BQU0sQ0FBQ2MsRUFBRSxDQUFDLEVBQUUsQ0FBQztZQUNoQyxPQUFPLElBQUlHLFFBQVEsR0FBRztnQkFDbEIsSUFBSSxDQUFDbEIsSUFBSSxDQUFDLElBQUksQ0FBQ0MsTUFBTSxDQUFDYyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDZCxNQUFNLENBQUNjLEVBQUUsQ0FBQyxFQUFFO1lBQ2xELE9BQU87Z0JBQ0gsSUFBSSxDQUFDZixJQUFJLENBQUMsSUFBSSxDQUFDQyxNQUFNLENBQUNjLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FDeEIsSUFBSSxDQUFDZCxNQUFNLENBQUNjLEVBQUUsQ0FBQyxFQUFFLEVBQ2pCLElBQUksQ0FBQ2QsTUFBTSxDQUFDYyxFQUFFLENBQUMsRUFBRTtZQUV6QjtRQUNKO0lBQ0o7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RvcmNoX3Byb2plY3QvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0NvbGxlY3RpbmdIYW5kbGVyLmpzPzgwYWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBDb2xsZWN0aW5nSGFuZGxlcjtcblxuZnVuY3Rpb24gQ29sbGVjdGluZ0hhbmRsZXIoY2JzKSB7XG4gICAgdGhpcy5fY2JzID0gY2JzIHx8IHt9O1xuICAgIHRoaXMuZXZlbnRzID0gW107XG59XG5cbnZhciBFVkVOVFMgPSByZXF1aXJlKFwiLi9cIikuRVZFTlRTO1xuT2JqZWN0LmtleXMoRVZFTlRTKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoRVZFTlRTW25hbWVdID09PSAwKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goW25hbWVdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXSgpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKFtuYW1lLCBhXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgbmFtZSA9IFwib25cIiArIG5hbWU7XG4gICAgICAgIENvbGxlY3RpbmdIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzLnB1c2goW25hbWUsIGEsIGJdKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHNcIik7XG4gICAgfVxufSk7XG5cbkNvbGxlY3RpbmdIYW5kbGVyLnByb3RvdHlwZS5vbnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ldmVudHMgPSBbXTtcbiAgICBpZiAodGhpcy5fY2JzLm9ucmVzZXQpIHRoaXMuX2Nicy5vbnJlc2V0KCk7XG59O1xuXG5Db2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGUucmVzdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYnMub25yZXNldCkgdGhpcy5fY2JzLm9ucmVzZXQoKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmV2ZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBpZiAodGhpcy5fY2JzW3RoaXMuZXZlbnRzW2ldWzBdXSkge1xuICAgICAgICAgICAgdmFyIG51bSA9IHRoaXMuZXZlbnRzW2ldLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKG51bSA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtID09PSAyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2JzW3RoaXMuZXZlbnRzW2ldWzBdXSh0aGlzLmV2ZW50c1tpXVsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0oXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRzW2ldWzFdLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1tpXVsyXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJDb2xsZWN0aW5nSGFuZGxlciIsImNicyIsIl9jYnMiLCJldmVudHMiLCJFVkVOVFMiLCJyZXF1aXJlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJuYW1lIiwicHJvdG90eXBlIiwicHVzaCIsImEiLCJiIiwiRXJyb3IiLCJvbnJlc2V0IiwicmVzdGFydCIsImkiLCJsZW4iLCJsZW5ndGgiLCJudW0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/CollectingHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js":
/*!*****************************************************!*\
  !*** ./node_modules/htmlparser2/lib/FeedHandler.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar DomHandler = __webpack_require__(/*! domhandler */ \"(ssr)/./node_modules/domhandler/index.js\");\nvar DomUtils = __webpack_require__(/*! domutils */ \"(ssr)/./node_modules/domutils/index.js\");\n//TODO: make this a streamable handler\nfunction FeedHandler(callback, options) {\n    this.init(callback, options);\n}\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(FeedHandler, DomHandler);\nFeedHandler.prototype.init = DomHandler;\nfunction getElements(what, where) {\n    return DomUtils.getElementsByTagName(what, where, true);\n}\nfunction getOneElement(what, where) {\n    return DomUtils.getElementsByTagName(what, where, true, 1)[0];\n}\nfunction fetch(what, where, recurse) {\n    return DomUtils.getText(DomUtils.getElementsByTagName(what, where, recurse, 1)).trim();\n}\nfunction addConditionally(obj, prop, what, where, recurse) {\n    var tmp = fetch(what, where, recurse);\n    if (tmp) obj[prop] = tmp;\n}\nvar isValidFeed = function(value) {\n    return value === \"rss\" || value === \"feed\" || value === \"rdf:RDF\";\n};\nFeedHandler.prototype.onend = function() {\n    var feed = {}, feedRoot = getOneElement(isValidFeed, this.dom), tmp, childs;\n    if (feedRoot) {\n        if (feedRoot.name === \"feed\") {\n            childs = feedRoot.children;\n            feed.type = \"atom\";\n            addConditionally(feed, \"id\", \"id\", childs);\n            addConditionally(feed, \"title\", \"title\", childs);\n            if ((tmp = getOneElement(\"link\", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;\n            addConditionally(feed, \"description\", \"subtitle\", childs);\n            if (tmp = fetch(\"updated\", childs)) feed.updated = new Date(tmp);\n            addConditionally(feed, \"author\", \"email\", childs, true);\n            feed.items = getElements(\"entry\", childs).map(function(item) {\n                var entry = {}, tmp;\n                item = item.children;\n                addConditionally(entry, \"id\", \"id\", item);\n                addConditionally(entry, \"title\", \"title\", item);\n                if ((tmp = getOneElement(\"link\", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;\n                if (tmp = fetch(\"summary\", item) || fetch(\"content\", item)) entry.description = tmp;\n                if (tmp = fetch(\"updated\", item)) entry.pubDate = new Date(tmp);\n                return entry;\n            });\n        } else {\n            childs = getOneElement(\"channel\", feedRoot.children).children;\n            feed.type = feedRoot.name.substr(0, 3);\n            feed.id = \"\";\n            addConditionally(feed, \"title\", \"title\", childs);\n            addConditionally(feed, \"link\", \"link\", childs);\n            addConditionally(feed, \"description\", \"description\", childs);\n            if (tmp = fetch(\"lastBuildDate\", childs)) feed.updated = new Date(tmp);\n            addConditionally(feed, \"author\", \"managingEditor\", childs, true);\n            feed.items = getElements(\"item\", feedRoot.children).map(function(item) {\n                var entry = {}, tmp;\n                item = item.children;\n                addConditionally(entry, \"id\", \"guid\", item);\n                addConditionally(entry, \"title\", \"title\", item);\n                addConditionally(entry, \"link\", \"link\", item);\n                addConditionally(entry, \"description\", \"description\", item);\n                if (tmp = fetch(\"pubDate\", item)) entry.pubDate = new Date(tmp);\n                return entry;\n            });\n        }\n    }\n    this.dom = feed;\n    DomHandler.prototype._handleCallback.call(this, feedRoot ? null : Error(\"couldn't find root of feed\"));\n};\nmodule.exports = FeedHandler;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/Parser.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Parser.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Tokenizer = __webpack_require__(/*! ./Tokenizer.js */ \"(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js\");\n/*\n\tOptions:\n\n\txmlMode: Disables the special behavior for script/style tags (false by default)\n\tlowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)\n\tlowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)\n*/ /*\n\tCallbacks:\n\n\toncdataend,\n\toncdatastart,\n\tonclosetag,\n\toncomment,\n\toncommentend,\n\tonerror,\n\tonopentag,\n\tonprocessinginstruction,\n\tonreset,\n\tontext\n*/ var formTags = {\n    input: true,\n    option: true,\n    optgroup: true,\n    select: true,\n    button: true,\n    datalist: true,\n    textarea: true\n};\nvar openImpliesClose = {\n    tr: {\n        tr: true,\n        th: true,\n        td: true\n    },\n    th: {\n        th: true\n    },\n    td: {\n        thead: true,\n        th: true,\n        td: true\n    },\n    body: {\n        head: true,\n        link: true,\n        script: true\n    },\n    li: {\n        li: true\n    },\n    p: {\n        p: true\n    },\n    h1: {\n        p: true\n    },\n    h2: {\n        p: true\n    },\n    h3: {\n        p: true\n    },\n    h4: {\n        p: true\n    },\n    h5: {\n        p: true\n    },\n    h6: {\n        p: true\n    },\n    select: formTags,\n    input: formTags,\n    output: formTags,\n    button: formTags,\n    datalist: formTags,\n    textarea: formTags,\n    option: {\n        option: true\n    },\n    optgroup: {\n        optgroup: true\n    }\n};\nvar voidElements = {\n    __proto__: null,\n    area: true,\n    base: true,\n    basefont: true,\n    br: true,\n    col: true,\n    command: true,\n    embed: true,\n    frame: true,\n    hr: true,\n    img: true,\n    input: true,\n    isindex: true,\n    keygen: true,\n    link: true,\n    meta: true,\n    param: true,\n    source: true,\n    track: true,\n    wbr: true\n};\nvar foreignContextElements = {\n    __proto__: null,\n    math: true,\n    svg: true\n};\nvar htmlIntegrationElements = {\n    __proto__: null,\n    mi: true,\n    mo: true,\n    mn: true,\n    ms: true,\n    mtext: true,\n    \"annotation-xml\": true,\n    foreignObject: true,\n    desc: true,\n    title: true\n};\nvar re_nameEnd = /\\s|\\//;\nfunction Parser(cbs, options) {\n    this._options = options || {};\n    this._cbs = cbs || {};\n    this._tagname = \"\";\n    this._attribname = \"\";\n    this._attribvalue = \"\";\n    this._attribs = null;\n    this._stack = [];\n    this._foreignContext = [];\n    this.startIndex = 0;\n    this.endIndex = null;\n    this._lowerCaseTagNames = \"lowerCaseTags\" in this._options ? !!this._options.lowerCaseTags : !this._options.xmlMode;\n    this._lowerCaseAttributeNames = \"lowerCaseAttributeNames\" in this._options ? !!this._options.lowerCaseAttributeNames : !this._options.xmlMode;\n    if (this._options.Tokenizer) {\n        Tokenizer = this._options.Tokenizer;\n    }\n    this._tokenizer = new Tokenizer(this._options, this);\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n}\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Parser, (__webpack_require__(/*! events */ \"events\").EventEmitter));\nParser.prototype._updatePosition = function(initialOffset) {\n    if (this.endIndex === null) {\n        if (this._tokenizer._sectionStart <= initialOffset) {\n            this.startIndex = 0;\n        } else {\n            this.startIndex = this._tokenizer._sectionStart - initialOffset;\n        }\n    } else this.startIndex = this.endIndex + 1;\n    this.endIndex = this._tokenizer.getAbsoluteIndex();\n};\n//Tokenizer event handlers\nParser.prototype.ontext = function(data) {\n    this._updatePosition(1);\n    this.endIndex--;\n    if (this._cbs.ontext) this._cbs.ontext(data);\n};\nParser.prototype.onopentagname = function(name) {\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n    this._tagname = name;\n    if (!this._options.xmlMode && name in openImpliesClose) {\n        for(var el; ((el = this._stack[this._stack.length - 1]) in openImpliesClose[name]); this.onclosetag(el));\n    }\n    if (this._options.xmlMode || !(name in voidElements)) {\n        this._stack.push(name);\n        if (name in foreignContextElements) this._foreignContext.push(true);\n        else if (name in htmlIntegrationElements) this._foreignContext.push(false);\n    }\n    if (this._cbs.onopentagname) this._cbs.onopentagname(name);\n    if (this._cbs.onopentag) this._attribs = {};\n};\nParser.prototype.onopentagend = function() {\n    this._updatePosition(1);\n    if (this._attribs) {\n        if (this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);\n        this._attribs = null;\n    }\n    if (!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements) {\n        this._cbs.onclosetag(this._tagname);\n    }\n    this._tagname = \"\";\n};\nParser.prototype.onclosetag = function(name) {\n    this._updatePosition(1);\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n    if (name in foreignContextElements || name in htmlIntegrationElements) {\n        this._foreignContext.pop();\n    }\n    if (this._stack.length && (!(name in voidElements) || this._options.xmlMode)) {\n        var pos = this._stack.lastIndexOf(name);\n        if (pos !== -1) {\n            if (this._cbs.onclosetag) {\n                pos = this._stack.length - pos;\n                while(pos--)this._cbs.onclosetag(this._stack.pop());\n            } else this._stack.length = pos;\n        } else if (name === \"p\" && !this._options.xmlMode) {\n            this.onopentagname(name);\n            this._closeCurrentTag();\n        }\n    } else if (!this._options.xmlMode && (name === \"br\" || name === \"p\")) {\n        this.onopentagname(name);\n        this._closeCurrentTag();\n    }\n};\nParser.prototype.onselfclosingtag = function() {\n    if (this._options.xmlMode || this._options.recognizeSelfClosing || this._foreignContext[this._foreignContext.length - 1]) {\n        this._closeCurrentTag();\n    } else {\n        this.onopentagend();\n    }\n};\nParser.prototype._closeCurrentTag = function() {\n    var name = this._tagname;\n    this.onopentagend();\n    //self-closing tags will be on the top of the stack\n    //(cheaper check than in onclosetag)\n    if (this._stack[this._stack.length - 1] === name) {\n        if (this._cbs.onclosetag) {\n            this._cbs.onclosetag(name);\n        }\n        this._stack.pop();\n    }\n};\nParser.prototype.onattribname = function(name) {\n    if (this._lowerCaseAttributeNames) {\n        name = name.toLowerCase();\n    }\n    this._attribname = name;\n};\nParser.prototype.onattribdata = function(value) {\n    this._attribvalue += value;\n};\nParser.prototype.onattribend = function() {\n    if (this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);\n    if (this._attribs && !Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)) {\n        this._attribs[this._attribname] = this._attribvalue;\n    }\n    this._attribname = \"\";\n    this._attribvalue = \"\";\n};\nParser.prototype._getInstructionName = function(value) {\n    var idx = value.search(re_nameEnd), name = idx < 0 ? value : value.substr(0, idx);\n    if (this._lowerCaseTagNames) {\n        name = name.toLowerCase();\n    }\n    return name;\n};\nParser.prototype.ondeclaration = function(value) {\n    if (this._cbs.onprocessinginstruction) {\n        var name = this._getInstructionName(value);\n        this._cbs.onprocessinginstruction(\"!\" + name, \"!\" + value);\n    }\n};\nParser.prototype.onprocessinginstruction = function(value) {\n    if (this._cbs.onprocessinginstruction) {\n        var name = this._getInstructionName(value);\n        this._cbs.onprocessinginstruction(\"?\" + name, \"?\" + value);\n    }\n};\nParser.prototype.oncomment = function(value) {\n    this._updatePosition(4);\n    if (this._cbs.oncomment) this._cbs.oncomment(value);\n    if (this._cbs.oncommentend) this._cbs.oncommentend();\n};\nParser.prototype.oncdata = function(value) {\n    this._updatePosition(1);\n    if (this._options.xmlMode || this._options.recognizeCDATA) {\n        if (this._cbs.oncdatastart) this._cbs.oncdatastart();\n        if (this._cbs.ontext) this._cbs.ontext(value);\n        if (this._cbs.oncdataend) this._cbs.oncdataend();\n    } else {\n        this.oncomment(\"[CDATA[\" + value + \"]]\");\n    }\n};\nParser.prototype.onerror = function(err) {\n    if (this._cbs.onerror) this._cbs.onerror(err);\n};\nParser.prototype.onend = function() {\n    if (this._cbs.onclosetag) {\n        for(var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i]));\n    }\n    if (this._cbs.onend) this._cbs.onend();\n};\n//Resets the parser to a blank state, ready to parse a new HTML document\nParser.prototype.reset = function() {\n    if (this._cbs.onreset) this._cbs.onreset();\n    this._tokenizer.reset();\n    this._tagname = \"\";\n    this._attribname = \"\";\n    this._attribs = null;\n    this._stack = [];\n    if (this._cbs.onparserinit) this._cbs.onparserinit(this);\n};\n//Parses a complete HTML document and pushes it to the handler\nParser.prototype.parseComplete = function(data) {\n    this.reset();\n    this.end(data);\n};\nParser.prototype.write = function(chunk) {\n    this._tokenizer.write(chunk);\n};\nParser.prototype.end = function(chunk) {\n    this._tokenizer.end(chunk);\n};\nParser.prototype.pause = function() {\n    this._tokenizer.pause();\n};\nParser.prototype.resume = function() {\n    this._tokenizer.resume();\n};\n//alias for backwards compat\nParser.prototype.parseChunk = Parser.prototype.write;\nParser.prototype.done = Parser.prototype.end;\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/Parser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/ProxyHandler.js":
/*!******************************************************!*\
  !*** ./node_modules/htmlparser2/lib/ProxyHandler.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = ProxyHandler;\nfunction ProxyHandler(cbs) {\n    this._cbs = cbs || {};\n}\nvar EVENTS = (__webpack_require__(/*! ./ */ \"(ssr)/./node_modules/htmlparser2/lib/index.js\").EVENTS);\nObject.keys(EVENTS).forEach(function(name) {\n    if (EVENTS[name] === 0) {\n        name = \"on\" + name;\n        ProxyHandler.prototype[name] = function() {\n            if (this._cbs[name]) this._cbs[name]();\n        };\n    } else if (EVENTS[name] === 1) {\n        name = \"on\" + name;\n        ProxyHandler.prototype[name] = function(a) {\n            if (this._cbs[name]) this._cbs[name](a);\n        };\n    } else if (EVENTS[name] === 2) {\n        name = \"on\" + name;\n        ProxyHandler.prototype[name] = function(a, b) {\n            if (this._cbs[name]) this._cbs[name](a, b);\n        };\n    } else {\n        throw Error(\"wrong number of arguments\");\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1Byb3h5SGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsYUFBYUMsR0FBRztJQUNyQixJQUFJLENBQUNDLElBQUksR0FBR0QsT0FBTyxDQUFDO0FBQ3hCO0FBRUEsSUFBSUUsU0FBU0MsdUZBQW9CO0FBQ2pDQyxPQUFPQyxJQUFJLENBQUNILFFBQVFJLE9BQU8sQ0FBQyxTQUFTQyxJQUFJO0lBQ3JDLElBQUlMLE1BQU0sQ0FBQ0ssS0FBSyxLQUFLLEdBQUc7UUFDcEJBLE9BQU8sT0FBT0E7UUFDZFIsYUFBYVMsU0FBUyxDQUFDRCxLQUFLLEdBQUc7WUFDM0IsSUFBSSxJQUFJLENBQUNOLElBQUksQ0FBQ00sS0FBSyxFQUFFLElBQUksQ0FBQ04sSUFBSSxDQUFDTSxLQUFLO1FBQ3hDO0lBQ0osT0FBTyxJQUFJTCxNQUFNLENBQUNLLEtBQUssS0FBSyxHQUFHO1FBQzNCQSxPQUFPLE9BQU9BO1FBQ2RSLGFBQWFTLFNBQVMsQ0FBQ0QsS0FBSyxHQUFHLFNBQVNFLENBQUM7WUFDckMsSUFBSSxJQUFJLENBQUNSLElBQUksQ0FBQ00sS0FBSyxFQUFFLElBQUksQ0FBQ04sSUFBSSxDQUFDTSxLQUFLLENBQUNFO1FBQ3pDO0lBQ0osT0FBTyxJQUFJUCxNQUFNLENBQUNLLEtBQUssS0FBSyxHQUFHO1FBQzNCQSxPQUFPLE9BQU9BO1FBQ2RSLGFBQWFTLFNBQVMsQ0FBQ0QsS0FBSyxHQUFHLFNBQVNFLENBQUMsRUFBRUMsQ0FBQztZQUN4QyxJQUFJLElBQUksQ0FBQ1QsSUFBSSxDQUFDTSxLQUFLLEVBQUUsSUFBSSxDQUFDTixJQUFJLENBQUNNLEtBQUssQ0FBQ0UsR0FBR0M7UUFDNUM7SUFDSixPQUFPO1FBQ0gsTUFBTUMsTUFBTTtJQUNoQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9yY2hfcHJvamVjdC8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvUHJveHlIYW5kbGVyLmpzP2I0NjUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBQcm94eUhhbmRsZXI7XG5cbmZ1bmN0aW9uIFByb3h5SGFuZGxlcihjYnMpIHtcbiAgICB0aGlzLl9jYnMgPSBjYnMgfHwge307XG59XG5cbnZhciBFVkVOVFMgPSByZXF1aXJlKFwiLi9cIikuRVZFTlRTO1xuT2JqZWN0LmtleXMoRVZFTlRTKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoRVZFTlRTW25hbWVdID09PSAwKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBQcm94eUhhbmRsZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMSkge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgUHJveHlIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMikge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgUHJveHlIYW5kbGVyLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXShhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHNcIik7XG4gICAgfVxufSk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIlByb3h5SGFuZGxlciIsImNicyIsIl9jYnMiLCJFVkVOVFMiLCJyZXF1aXJlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJuYW1lIiwicHJvdG90eXBlIiwiYSIsImIiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/ProxyHandler.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/Stream.js":
/*!************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Stream.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Stream;\nvar Parser = __webpack_require__(/*! ./WritableStream.js */ \"(ssr)/./node_modules/htmlparser2/lib/WritableStream.js\");\nfunction Stream(options) {\n    Parser.call(this, new Cbs(this), options);\n}\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Stream, Parser);\nStream.prototype.readable = true;\nfunction Cbs(scope) {\n    this.scope = scope;\n}\nvar EVENTS = (__webpack_require__(/*! ../ */ \"(ssr)/./node_modules/htmlparser2/lib/index.js\").EVENTS);\nObject.keys(EVENTS).forEach(function(name) {\n    if (EVENTS[name] === 0) {\n        Cbs.prototype[\"on\" + name] = function() {\n            this.scope.emit(name);\n        };\n    } else if (EVENTS[name] === 1) {\n        Cbs.prototype[\"on\" + name] = function(a) {\n            this.scope.emit(name, a);\n        };\n    } else if (EVENTS[name] === 2) {\n        Cbs.prototype[\"on\" + name] = function(a, b) {\n            this.scope.emit(name, a, b);\n        };\n    } else {\n        throw Error(\"wrong number of arguments!\");\n    }\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1N0cmVhbS5qcyIsIm1hcHBpbmdzIjoiO0FBQUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsU0FBU0MsbUJBQU9BLENBQUMsbUZBQXFCO0FBRTFDLFNBQVNGLE9BQU9HLE9BQU87SUFDbkJGLE9BQU9HLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSUMsSUFBSSxJQUFJLEdBQUdGO0FBQ3JDO0FBRUFELG1CQUFPQSxDQUFDLDJEQUFVLEVBQUVGLFFBQVFDO0FBRTVCRCxPQUFPTSxTQUFTLENBQUNDLFFBQVEsR0FBRztBQUU1QixTQUFTRixJQUFJRyxLQUFLO0lBQ2QsSUFBSSxDQUFDQSxLQUFLLEdBQUdBO0FBQ2pCO0FBRUEsSUFBSUMsU0FBU1Asd0ZBQXFCO0FBRWxDUSxPQUFPQyxJQUFJLENBQUNGLFFBQVFHLE9BQU8sQ0FBQyxTQUFTQyxJQUFJO0lBQ3JDLElBQUlKLE1BQU0sQ0FBQ0ksS0FBSyxLQUFLLEdBQUc7UUFDcEJSLElBQUlDLFNBQVMsQ0FBQyxPQUFPTyxLQUFLLEdBQUc7WUFDekIsSUFBSSxDQUFDTCxLQUFLLENBQUNNLElBQUksQ0FBQ0Q7UUFDcEI7SUFDSixPQUFPLElBQUlKLE1BQU0sQ0FBQ0ksS0FBSyxLQUFLLEdBQUc7UUFDM0JSLElBQUlDLFNBQVMsQ0FBQyxPQUFPTyxLQUFLLEdBQUcsU0FBU0UsQ0FBQztZQUNuQyxJQUFJLENBQUNQLEtBQUssQ0FBQ00sSUFBSSxDQUFDRCxNQUFNRTtRQUMxQjtJQUNKLE9BQU8sSUFBSU4sTUFBTSxDQUFDSSxLQUFLLEtBQUssR0FBRztRQUMzQlIsSUFBSUMsU0FBUyxDQUFDLE9BQU9PLEtBQUssR0FBRyxTQUFTRSxDQUFDLEVBQUVDLENBQUM7WUFDdEMsSUFBSSxDQUFDUixLQUFLLENBQUNNLElBQUksQ0FBQ0QsTUFBTUUsR0FBR0M7UUFDN0I7SUFDSixPQUFPO1FBQ0gsTUFBTUMsTUFBTTtJQUNoQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9yY2hfcHJvamVjdC8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvU3RyZWFtLmpzPzM1OWMiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlKFwiLi9Xcml0YWJsZVN0cmVhbS5qc1wiKTtcblxuZnVuY3Rpb24gU3RyZWFtKG9wdGlvbnMpIHtcbiAgICBQYXJzZXIuY2FsbCh0aGlzLCBuZXcgQ2JzKHRoaXMpLCBvcHRpb25zKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKFN0cmVhbSwgUGFyc2VyKTtcblxuU3RyZWFtLnByb3RvdHlwZS5yZWFkYWJsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIENicyhzY29wZSkge1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbn1cblxudmFyIEVWRU5UUyA9IHJlcXVpcmUoXCIuLi9cIikuRVZFTlRTO1xuXG5PYmplY3Qua2V5cyhFVkVOVFMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChFVkVOVFNbbmFtZV0gPT09IDApIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zY29wZS5lbWl0KG5hbWUpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIENicy5wcm90b3R5cGVbXCJvblwiICsgbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmVtaXQobmFtZSwgYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuZW1pdChuYW1lLCBhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMhXCIpO1xuICAgIH1cbn0pO1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJTdHJlYW0iLCJQYXJzZXIiLCJyZXF1aXJlIiwib3B0aW9ucyIsImNhbGwiLCJDYnMiLCJwcm90b3R5cGUiLCJyZWFkYWJsZSIsInNjb3BlIiwiRVZFTlRTIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJuYW1lIiwiZW1pdCIsImEiLCJiIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/Stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js":
/*!***************************************************!*\
  !*** ./node_modules/htmlparser2/lib/Tokenizer.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Tokenizer;\nvar decodeCodePoint = __webpack_require__(/*! entities/lib/decode_codepoint.js */ \"(ssr)/./node_modules/entities/lib/decode_codepoint.js\");\nvar entityMap = __webpack_require__(/*! entities/maps/entities.json */ \"(ssr)/./node_modules/entities/maps/entities.json\");\nvar legacyMap = __webpack_require__(/*! entities/maps/legacy.json */ \"(ssr)/./node_modules/entities/maps/legacy.json\");\nvar xmlMap = __webpack_require__(/*! entities/maps/xml.json */ \"(ssr)/./node_modules/entities/maps/xml.json\");\nvar i = 0;\nvar TEXT = i++;\nvar BEFORE_TAG_NAME = i++; //after <\nvar IN_TAG_NAME = i++;\nvar IN_SELF_CLOSING_TAG = i++;\nvar BEFORE_CLOSING_TAG_NAME = i++;\nvar IN_CLOSING_TAG_NAME = i++;\nvar AFTER_CLOSING_TAG_NAME = i++;\n//attributes\nvar BEFORE_ATTRIBUTE_NAME = i++;\nvar IN_ATTRIBUTE_NAME = i++;\nvar AFTER_ATTRIBUTE_NAME = i++;\nvar BEFORE_ATTRIBUTE_VALUE = i++;\nvar IN_ATTRIBUTE_VALUE_DQ = i++; // \"\nvar IN_ATTRIBUTE_VALUE_SQ = i++; // '\nvar IN_ATTRIBUTE_VALUE_NQ = i++;\n//declarations\nvar BEFORE_DECLARATION = i++; // !\nvar IN_DECLARATION = i++;\n//processing instructions\nvar IN_PROCESSING_INSTRUCTION = i++; // ?\n//comments\nvar BEFORE_COMMENT = i++;\nvar IN_COMMENT = i++;\nvar AFTER_COMMENT_1 = i++;\nvar AFTER_COMMENT_2 = i++;\n//cdata\nvar BEFORE_CDATA_1 = i++; // [\nvar BEFORE_CDATA_2 = i++; // C\nvar BEFORE_CDATA_3 = i++; // D\nvar BEFORE_CDATA_4 = i++; // A\nvar BEFORE_CDATA_5 = i++; // T\nvar BEFORE_CDATA_6 = i++; // A\nvar IN_CDATA = i++; // [\nvar AFTER_CDATA_1 = i++; // ]\nvar AFTER_CDATA_2 = i++; // ]\n//special tags\nvar BEFORE_SPECIAL = i++; //S\nvar BEFORE_SPECIAL_END = i++; //S\nvar BEFORE_SCRIPT_1 = i++; //C\nvar BEFORE_SCRIPT_2 = i++; //R\nvar BEFORE_SCRIPT_3 = i++; //I\nvar BEFORE_SCRIPT_4 = i++; //P\nvar BEFORE_SCRIPT_5 = i++; //T\nvar AFTER_SCRIPT_1 = i++; //C\nvar AFTER_SCRIPT_2 = i++; //R\nvar AFTER_SCRIPT_3 = i++; //I\nvar AFTER_SCRIPT_4 = i++; //P\nvar AFTER_SCRIPT_5 = i++; //T\nvar BEFORE_STYLE_1 = i++; //T\nvar BEFORE_STYLE_2 = i++; //Y\nvar BEFORE_STYLE_3 = i++; //L\nvar BEFORE_STYLE_4 = i++; //E\nvar AFTER_STYLE_1 = i++; //T\nvar AFTER_STYLE_2 = i++; //Y\nvar AFTER_STYLE_3 = i++; //L\nvar AFTER_STYLE_4 = i++; //E\nvar BEFORE_ENTITY = i++; //&\nvar BEFORE_NUMERIC_ENTITY = i++; //#\nvar IN_NAMED_ENTITY = i++;\nvar IN_NUMERIC_ENTITY = i++;\nvar IN_HEX_ENTITY = i++; //X\nvar j = 0;\nvar SPECIAL_NONE = j++;\nvar SPECIAL_SCRIPT = j++;\nvar SPECIAL_STYLE = j++;\nfunction whitespace(c) {\n    return c === \" \" || c === \"\\n\" || c === \"\t\" || c === \"\\f\" || c === \"\\r\";\n}\nfunction ifElseState(upper, SUCCESS, FAILURE) {\n    var lower = upper.toLowerCase();\n    if (upper === lower) {\n        return function(c) {\n            if (c === lower) {\n                this._state = SUCCESS;\n            } else {\n                this._state = FAILURE;\n                this._index--;\n            }\n        };\n    } else {\n        return function(c) {\n            if (c === lower || c === upper) {\n                this._state = SUCCESS;\n            } else {\n                this._state = FAILURE;\n                this._index--;\n            }\n        };\n    }\n}\nfunction consumeSpecialNameChar(upper, NEXT_STATE) {\n    var lower = upper.toLowerCase();\n    return function(c) {\n        if (c === lower || c === upper) {\n            this._state = NEXT_STATE;\n        } else {\n            this._state = IN_TAG_NAME;\n            this._index--; //consume the token again\n        }\n    };\n}\nfunction Tokenizer(options, cbs) {\n    this._state = TEXT;\n    this._buffer = \"\";\n    this._sectionStart = 0;\n    this._index = 0;\n    this._bufferOffset = 0; //chars removed from _buffer\n    this._baseState = TEXT;\n    this._special = SPECIAL_NONE;\n    this._cbs = cbs;\n    this._running = true;\n    this._ended = false;\n    this._xmlMode = !!(options && options.xmlMode);\n    this._decodeEntities = !!(options && options.decodeEntities);\n}\nTokenizer.prototype._stateText = function(c) {\n    if (c === \"<\") {\n        if (this._index > this._sectionStart) {\n            this._cbs.ontext(this._getSection());\n        }\n        this._state = BEFORE_TAG_NAME;\n        this._sectionStart = this._index;\n    } else if (this._decodeEntities && this._special === SPECIAL_NONE && c === \"&\") {\n        if (this._index > this._sectionStart) {\n            this._cbs.ontext(this._getSection());\n        }\n        this._baseState = TEXT;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateBeforeTagName = function(c) {\n    if (c === \"/\") {\n        this._state = BEFORE_CLOSING_TAG_NAME;\n    } else if (c === \"<\") {\n        this._cbs.ontext(this._getSection());\n        this._sectionStart = this._index;\n    } else if (c === \">\" || this._special !== SPECIAL_NONE || whitespace(c)) {\n        this._state = TEXT;\n    } else if (c === \"!\") {\n        this._state = BEFORE_DECLARATION;\n        this._sectionStart = this._index + 1;\n    } else if (c === \"?\") {\n        this._state = IN_PROCESSING_INSTRUCTION;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = !this._xmlMode && (c === \"s\" || c === \"S\") ? BEFORE_SPECIAL : IN_TAG_NAME;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateInTagName = function(c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n        this._emitToken(\"onopentagname\");\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\nTokenizer.prototype._stateBeforeCloseingTagName = function(c) {\n    if (whitespace(c)) ;\n    else if (c === \">\") {\n        this._state = TEXT;\n    } else if (this._special !== SPECIAL_NONE) {\n        if (c === \"s\" || c === \"S\") {\n            this._state = BEFORE_SPECIAL_END;\n        } else {\n            this._state = TEXT;\n            this._index--;\n        }\n    } else {\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateInCloseingTagName = function(c) {\n    if (c === \">\" || whitespace(c)) {\n        this._emitToken(\"onclosetag\");\n        this._state = AFTER_CLOSING_TAG_NAME;\n        this._index--;\n    }\n};\nTokenizer.prototype._stateAfterCloseingTagName = function(c) {\n    //skip everything until \">\"\n    if (c === \">\") {\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\nTokenizer.prototype._stateBeforeAttributeName = function(c) {\n    if (c === \">\") {\n        this._cbs.onopentagend();\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c === \"/\") {\n        this._state = IN_SELF_CLOSING_TAG;\n    } else if (!whitespace(c)) {\n        this._state = IN_ATTRIBUTE_NAME;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateInSelfClosingTag = function(c) {\n    if (c === \">\") {\n        this._cbs.onselfclosingtag();\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\nTokenizer.prototype._stateInAttributeName = function(c) {\n    if (c === \"=\" || c === \"/\" || c === \">\" || whitespace(c)) {\n        this._cbs.onattribname(this._getSection());\n        this._sectionStart = -1;\n        this._state = AFTER_ATTRIBUTE_NAME;\n        this._index--;\n    }\n};\nTokenizer.prototype._stateAfterAttributeName = function(c) {\n    if (c === \"=\") {\n        this._state = BEFORE_ATTRIBUTE_VALUE;\n    } else if (c === \"/\" || c === \">\") {\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    } else if (!whitespace(c)) {\n        this._cbs.onattribend();\n        this._state = IN_ATTRIBUTE_NAME;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateBeforeAttributeValue = function(c) {\n    if (c === '\"') {\n        this._state = IN_ATTRIBUTE_VALUE_DQ;\n        this._sectionStart = this._index + 1;\n    } else if (c === \"'\") {\n        this._state = IN_ATTRIBUTE_VALUE_SQ;\n        this._sectionStart = this._index + 1;\n    } else if (!whitespace(c)) {\n        this._state = IN_ATTRIBUTE_VALUE_NQ;\n        this._sectionStart = this._index;\n        this._index--; //reconsume token\n    }\n};\nTokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c) {\n    if (c === '\"') {\n        this._emitToken(\"onattribdata\");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n    } else if (this._decodeEntities && c === \"&\") {\n        this._emitToken(\"onattribdata\");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateInAttributeValueSingleQuotes = function(c) {\n    if (c === \"'\") {\n        this._emitToken(\"onattribdata\");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n    } else if (this._decodeEntities && c === \"&\") {\n        this._emitToken(\"onattribdata\");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateInAttributeValueNoQuotes = function(c) {\n    if (whitespace(c) || c === \">\") {\n        this._emitToken(\"onattribdata\");\n        this._cbs.onattribend();\n        this._state = BEFORE_ATTRIBUTE_NAME;\n        this._index--;\n    } else if (this._decodeEntities && c === \"&\") {\n        this._emitToken(\"onattribdata\");\n        this._baseState = this._state;\n        this._state = BEFORE_ENTITY;\n        this._sectionStart = this._index;\n    }\n};\nTokenizer.prototype._stateBeforeDeclaration = function(c) {\n    this._state = c === \"[\" ? BEFORE_CDATA_1 : c === \"-\" ? BEFORE_COMMENT : IN_DECLARATION;\n};\nTokenizer.prototype._stateInDeclaration = function(c) {\n    if (c === \">\") {\n        this._cbs.ondeclaration(this._getSection());\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\nTokenizer.prototype._stateInProcessingInstruction = function(c) {\n    if (c === \">\") {\n        this._cbs.onprocessinginstruction(this._getSection());\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    }\n};\nTokenizer.prototype._stateBeforeComment = function(c) {\n    if (c === \"-\") {\n        this._state = IN_COMMENT;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = IN_DECLARATION;\n    }\n};\nTokenizer.prototype._stateInComment = function(c) {\n    if (c === \"-\") this._state = AFTER_COMMENT_1;\n};\nTokenizer.prototype._stateAfterComment1 = function(c) {\n    if (c === \"-\") {\n        this._state = AFTER_COMMENT_2;\n    } else {\n        this._state = IN_COMMENT;\n    }\n};\nTokenizer.prototype._stateAfterComment2 = function(c) {\n    if (c === \">\") {\n        //remove 2 trailing chars\n        this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c !== \"-\") {\n        this._state = IN_COMMENT;\n    }\n// else: stay in AFTER_COMMENT_2 (`--->`)\n};\nTokenizer.prototype._stateBeforeCdata1 = ifElseState(\"C\", BEFORE_CDATA_2, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata2 = ifElseState(\"D\", BEFORE_CDATA_3, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata3 = ifElseState(\"A\", BEFORE_CDATA_4, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata4 = ifElseState(\"T\", BEFORE_CDATA_5, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata5 = ifElseState(\"A\", BEFORE_CDATA_6, IN_DECLARATION);\nTokenizer.prototype._stateBeforeCdata6 = function(c) {\n    if (c === \"[\") {\n        this._state = IN_CDATA;\n        this._sectionStart = this._index + 1;\n    } else {\n        this._state = IN_DECLARATION;\n        this._index--;\n    }\n};\nTokenizer.prototype._stateInCdata = function(c) {\n    if (c === \"]\") this._state = AFTER_CDATA_1;\n};\nTokenizer.prototype._stateAfterCdata1 = function(c) {\n    if (c === \"]\") this._state = AFTER_CDATA_2;\n    else this._state = IN_CDATA;\n};\nTokenizer.prototype._stateAfterCdata2 = function(c) {\n    if (c === \">\") {\n        //remove 2 trailing chars\n        this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));\n        this._state = TEXT;\n        this._sectionStart = this._index + 1;\n    } else if (c !== \"]\") {\n        this._state = IN_CDATA;\n    }\n//else: stay in AFTER_CDATA_2 (`]]]>`)\n};\nTokenizer.prototype._stateBeforeSpecial = function(c) {\n    if (c === \"c\" || c === \"C\") {\n        this._state = BEFORE_SCRIPT_1;\n    } else if (c === \"t\" || c === \"T\") {\n        this._state = BEFORE_STYLE_1;\n    } else {\n        this._state = IN_TAG_NAME;\n        this._index--; //consume the token again\n    }\n};\nTokenizer.prototype._stateBeforeSpecialEnd = function(c) {\n    if (this._special === SPECIAL_SCRIPT && (c === \"c\" || c === \"C\")) {\n        this._state = AFTER_SCRIPT_1;\n    } else if (this._special === SPECIAL_STYLE && (c === \"t\" || c === \"T\")) {\n        this._state = AFTER_STYLE_1;\n    } else this._state = TEXT;\n};\nTokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar(\"R\", BEFORE_SCRIPT_2);\nTokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar(\"I\", BEFORE_SCRIPT_3);\nTokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar(\"P\", BEFORE_SCRIPT_4);\nTokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar(\"T\", BEFORE_SCRIPT_5);\nTokenizer.prototype._stateBeforeScript5 = function(c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_SCRIPT;\n    }\n    this._state = IN_TAG_NAME;\n    this._index--; //consume the token again\n};\nTokenizer.prototype._stateAfterScript1 = ifElseState(\"R\", AFTER_SCRIPT_2, TEXT);\nTokenizer.prototype._stateAfterScript2 = ifElseState(\"I\", AFTER_SCRIPT_3, TEXT);\nTokenizer.prototype._stateAfterScript3 = ifElseState(\"P\", AFTER_SCRIPT_4, TEXT);\nTokenizer.prototype._stateAfterScript4 = ifElseState(\"T\", AFTER_SCRIPT_5, TEXT);\nTokenizer.prototype._stateAfterScript5 = function(c) {\n    if (c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_NONE;\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index - 6;\n        this._index--; //reconsume the token\n    } else this._state = TEXT;\n};\nTokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar(\"Y\", BEFORE_STYLE_2);\nTokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar(\"L\", BEFORE_STYLE_3);\nTokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar(\"E\", BEFORE_STYLE_4);\nTokenizer.prototype._stateBeforeStyle4 = function(c) {\n    if (c === \"/\" || c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_STYLE;\n    }\n    this._state = IN_TAG_NAME;\n    this._index--; //consume the token again\n};\nTokenizer.prototype._stateAfterStyle1 = ifElseState(\"Y\", AFTER_STYLE_2, TEXT);\nTokenizer.prototype._stateAfterStyle2 = ifElseState(\"L\", AFTER_STYLE_3, TEXT);\nTokenizer.prototype._stateAfterStyle3 = ifElseState(\"E\", AFTER_STYLE_4, TEXT);\nTokenizer.prototype._stateAfterStyle4 = function(c) {\n    if (c === \">\" || whitespace(c)) {\n        this._special = SPECIAL_NONE;\n        this._state = IN_CLOSING_TAG_NAME;\n        this._sectionStart = this._index - 5;\n        this._index--; //reconsume the token\n    } else this._state = TEXT;\n};\nTokenizer.prototype._stateBeforeEntity = ifElseState(\"#\", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);\nTokenizer.prototype._stateBeforeNumericEntity = ifElseState(\"X\", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);\n//for entities terminated with a semicolon\nTokenizer.prototype._parseNamedEntityStrict = function() {\n    //offset = 1\n    if (this._sectionStart + 1 < this._index) {\n        var entity = this._buffer.substring(this._sectionStart + 1, this._index), map = this._xmlMode ? xmlMap : entityMap;\n        if (map.hasOwnProperty(entity)) {\n            this._emitPartial(map[entity]);\n            this._sectionStart = this._index + 1;\n        }\n    }\n};\n//parses legacy entities (without trailing semicolon)\nTokenizer.prototype._parseLegacyEntity = function() {\n    var start = this._sectionStart + 1, limit = this._index - start;\n    if (limit > 6) limit = 6; //the max length of legacy entities is 6\n    while(limit >= 2){\n        //the min length of legacy entities is 2\n        var entity = this._buffer.substr(start, limit);\n        if (legacyMap.hasOwnProperty(entity)) {\n            this._emitPartial(legacyMap[entity]);\n            this._sectionStart += limit + 1;\n            return;\n        } else {\n            limit--;\n        }\n    }\n};\nTokenizer.prototype._stateInNamedEntity = function(c) {\n    if (c === \";\") {\n        this._parseNamedEntityStrict();\n        if (this._sectionStart + 1 < this._index && !this._xmlMode) {\n            this._parseLegacyEntity();\n        }\n        this._state = this._baseState;\n    } else if ((c < \"a\" || c > \"z\") && (c < \"A\" || c > \"Z\") && (c < \"0\" || c > \"9\")) {\n        if (this._xmlMode) ;\n        else if (this._sectionStart + 1 === this._index) ;\n        else if (this._baseState !== TEXT) {\n            if (c !== \"=\") {\n                this._parseNamedEntityStrict();\n            }\n        } else {\n            this._parseLegacyEntity();\n        }\n        this._state = this._baseState;\n        this._index--;\n    }\n};\nTokenizer.prototype._decodeNumericEntity = function(offset, base) {\n    var sectionStart = this._sectionStart + offset;\n    if (sectionStart !== this._index) {\n        //parse entity\n        var entity = this._buffer.substring(sectionStart, this._index);\n        var parsed = parseInt(entity, base);\n        this._emitPartial(decodeCodePoint(parsed));\n        this._sectionStart = this._index;\n    } else {\n        this._sectionStart--;\n    }\n    this._state = this._baseState;\n};\nTokenizer.prototype._stateInNumericEntity = function(c) {\n    if (c === \";\") {\n        this._decodeNumericEntity(2, 10);\n        this._sectionStart++;\n    } else if (c < \"0\" || c > \"9\") {\n        if (!this._xmlMode) {\n            this._decodeNumericEntity(2, 10);\n        } else {\n            this._state = this._baseState;\n        }\n        this._index--;\n    }\n};\nTokenizer.prototype._stateInHexEntity = function(c) {\n    if (c === \";\") {\n        this._decodeNumericEntity(3, 16);\n        this._sectionStart++;\n    } else if ((c < \"a\" || c > \"f\") && (c < \"A\" || c > \"F\") && (c < \"0\" || c > \"9\")) {\n        if (!this._xmlMode) {\n            this._decodeNumericEntity(3, 16);\n        } else {\n            this._state = this._baseState;\n        }\n        this._index--;\n    }\n};\nTokenizer.prototype._cleanup = function() {\n    if (this._sectionStart < 0) {\n        this._buffer = \"\";\n        this._bufferOffset += this._index;\n        this._index = 0;\n    } else if (this._running) {\n        if (this._state === TEXT) {\n            if (this._sectionStart !== this._index) {\n                this._cbs.ontext(this._buffer.substr(this._sectionStart));\n            }\n            this._buffer = \"\";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else if (this._sectionStart === this._index) {\n            //the section just started\n            this._buffer = \"\";\n            this._bufferOffset += this._index;\n            this._index = 0;\n        } else {\n            //remove everything unnecessary\n            this._buffer = this._buffer.substr(this._sectionStart);\n            this._index -= this._sectionStart;\n            this._bufferOffset += this._sectionStart;\n        }\n        this._sectionStart = 0;\n    }\n};\n//TODO make events conditional\nTokenizer.prototype.write = function(chunk) {\n    if (this._ended) this._cbs.onerror(Error(\".write() after done!\"));\n    this._buffer += chunk;\n    this._parse();\n};\nTokenizer.prototype._parse = function() {\n    while(this._index < this._buffer.length && this._running){\n        var c = this._buffer.charAt(this._index);\n        if (this._state === TEXT) {\n            this._stateText(c);\n        } else if (this._state === BEFORE_TAG_NAME) {\n            this._stateBeforeTagName(c);\n        } else if (this._state === IN_TAG_NAME) {\n            this._stateInTagName(c);\n        } else if (this._state === BEFORE_CLOSING_TAG_NAME) {\n            this._stateBeforeCloseingTagName(c);\n        } else if (this._state === IN_CLOSING_TAG_NAME) {\n            this._stateInCloseingTagName(c);\n        } else if (this._state === AFTER_CLOSING_TAG_NAME) {\n            this._stateAfterCloseingTagName(c);\n        } else if (this._state === IN_SELF_CLOSING_TAG) {\n            this._stateInSelfClosingTag(c);\n        } else if (this._state === BEFORE_ATTRIBUTE_NAME) {\n            /*\n\t\t*\tattributes\n\t\t*/ this._stateBeforeAttributeName(c);\n        } else if (this._state === IN_ATTRIBUTE_NAME) {\n            this._stateInAttributeName(c);\n        } else if (this._state === AFTER_ATTRIBUTE_NAME) {\n            this._stateAfterAttributeName(c);\n        } else if (this._state === BEFORE_ATTRIBUTE_VALUE) {\n            this._stateBeforeAttributeValue(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_DQ) {\n            this._stateInAttributeValueDoubleQuotes(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_SQ) {\n            this._stateInAttributeValueSingleQuotes(c);\n        } else if (this._state === IN_ATTRIBUTE_VALUE_NQ) {\n            this._stateInAttributeValueNoQuotes(c);\n        } else if (this._state === BEFORE_DECLARATION) {\n            /*\n\t\t*\tdeclarations\n\t\t*/ this._stateBeforeDeclaration(c);\n        } else if (this._state === IN_DECLARATION) {\n            this._stateInDeclaration(c);\n        } else if (this._state === IN_PROCESSING_INSTRUCTION) {\n            /*\n\t\t*\tprocessing instructions\n\t\t*/ this._stateInProcessingInstruction(c);\n        } else if (this._state === BEFORE_COMMENT) {\n            /*\n\t\t*\tcomments\n\t\t*/ this._stateBeforeComment(c);\n        } else if (this._state === IN_COMMENT) {\n            this._stateInComment(c);\n        } else if (this._state === AFTER_COMMENT_1) {\n            this._stateAfterComment1(c);\n        } else if (this._state === AFTER_COMMENT_2) {\n            this._stateAfterComment2(c);\n        } else if (this._state === BEFORE_CDATA_1) {\n            /*\n\t\t*\tcdata\n\t\t*/ this._stateBeforeCdata1(c);\n        } else if (this._state === BEFORE_CDATA_2) {\n            this._stateBeforeCdata2(c);\n        } else if (this._state === BEFORE_CDATA_3) {\n            this._stateBeforeCdata3(c);\n        } else if (this._state === BEFORE_CDATA_4) {\n            this._stateBeforeCdata4(c);\n        } else if (this._state === BEFORE_CDATA_5) {\n            this._stateBeforeCdata5(c);\n        } else if (this._state === BEFORE_CDATA_6) {\n            this._stateBeforeCdata6(c);\n        } else if (this._state === IN_CDATA) {\n            this._stateInCdata(c);\n        } else if (this._state === AFTER_CDATA_1) {\n            this._stateAfterCdata1(c);\n        } else if (this._state === AFTER_CDATA_2) {\n            this._stateAfterCdata2(c);\n        } else if (this._state === BEFORE_SPECIAL) {\n            /*\n\t\t* special tags\n\t\t*/ this._stateBeforeSpecial(c);\n        } else if (this._state === BEFORE_SPECIAL_END) {\n            this._stateBeforeSpecialEnd(c);\n        } else if (this._state === BEFORE_SCRIPT_1) {\n            /*\n\t\t* script\n\t\t*/ this._stateBeforeScript1(c);\n        } else if (this._state === BEFORE_SCRIPT_2) {\n            this._stateBeforeScript2(c);\n        } else if (this._state === BEFORE_SCRIPT_3) {\n            this._stateBeforeScript3(c);\n        } else if (this._state === BEFORE_SCRIPT_4) {\n            this._stateBeforeScript4(c);\n        } else if (this._state === BEFORE_SCRIPT_5) {\n            this._stateBeforeScript5(c);\n        } else if (this._state === AFTER_SCRIPT_1) {\n            this._stateAfterScript1(c);\n        } else if (this._state === AFTER_SCRIPT_2) {\n            this._stateAfterScript2(c);\n        } else if (this._state === AFTER_SCRIPT_3) {\n            this._stateAfterScript3(c);\n        } else if (this._state === AFTER_SCRIPT_4) {\n            this._stateAfterScript4(c);\n        } else if (this._state === AFTER_SCRIPT_5) {\n            this._stateAfterScript5(c);\n        } else if (this._state === BEFORE_STYLE_1) {\n            /*\n\t\t* style\n\t\t*/ this._stateBeforeStyle1(c);\n        } else if (this._state === BEFORE_STYLE_2) {\n            this._stateBeforeStyle2(c);\n        } else if (this._state === BEFORE_STYLE_3) {\n            this._stateBeforeStyle3(c);\n        } else if (this._state === BEFORE_STYLE_4) {\n            this._stateBeforeStyle4(c);\n        } else if (this._state === AFTER_STYLE_1) {\n            this._stateAfterStyle1(c);\n        } else if (this._state === AFTER_STYLE_2) {\n            this._stateAfterStyle2(c);\n        } else if (this._state === AFTER_STYLE_3) {\n            this._stateAfterStyle3(c);\n        } else if (this._state === AFTER_STYLE_4) {\n            this._stateAfterStyle4(c);\n        } else if (this._state === BEFORE_ENTITY) {\n            /*\n\t\t* entities\n\t\t*/ this._stateBeforeEntity(c);\n        } else if (this._state === BEFORE_NUMERIC_ENTITY) {\n            this._stateBeforeNumericEntity(c);\n        } else if (this._state === IN_NAMED_ENTITY) {\n            this._stateInNamedEntity(c);\n        } else if (this._state === IN_NUMERIC_ENTITY) {\n            this._stateInNumericEntity(c);\n        } else if (this._state === IN_HEX_ENTITY) {\n            this._stateInHexEntity(c);\n        } else {\n            this._cbs.onerror(Error(\"unknown _state\"), this._state);\n        }\n        this._index++;\n    }\n    this._cleanup();\n};\nTokenizer.prototype.pause = function() {\n    this._running = false;\n};\nTokenizer.prototype.resume = function() {\n    this._running = true;\n    if (this._index < this._buffer.length) {\n        this._parse();\n    }\n    if (this._ended) {\n        this._finish();\n    }\n};\nTokenizer.prototype.end = function(chunk) {\n    if (this._ended) this._cbs.onerror(Error(\".end() after done!\"));\n    if (chunk) this.write(chunk);\n    this._ended = true;\n    if (this._running) this._finish();\n};\nTokenizer.prototype._finish = function() {\n    //if there is remaining data, emit it in a reasonable way\n    if (this._sectionStart < this._index) {\n        this._handleTrailingData();\n    }\n    this._cbs.onend();\n};\nTokenizer.prototype._handleTrailingData = function() {\n    var data = this._buffer.substr(this._sectionStart);\n    if (this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2) {\n        this._cbs.oncdata(data);\n    } else if (this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2) {\n        this._cbs.oncomment(data);\n    } else if (this._state === IN_NAMED_ENTITY && !this._xmlMode) {\n        this._parseLegacyEntity();\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state === IN_NUMERIC_ENTITY && !this._xmlMode) {\n        this._decodeNumericEntity(2, 10);\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state === IN_HEX_ENTITY && !this._xmlMode) {\n        this._decodeNumericEntity(3, 16);\n        if (this._sectionStart < this._index) {\n            this._state = this._baseState;\n            this._handleTrailingData();\n        }\n    } else if (this._state !== IN_TAG_NAME && this._state !== BEFORE_ATTRIBUTE_NAME && this._state !== BEFORE_ATTRIBUTE_VALUE && this._state !== AFTER_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_NAME && this._state !== IN_ATTRIBUTE_VALUE_SQ && this._state !== IN_ATTRIBUTE_VALUE_DQ && this._state !== IN_ATTRIBUTE_VALUE_NQ && this._state !== IN_CLOSING_TAG_NAME) {\n        this._cbs.ontext(data);\n    }\n//else, ignore remaining data\n//TODO add a way to remove current tag\n};\nTokenizer.prototype.reset = function() {\n    Tokenizer.call(this, {\n        xmlMode: this._xmlMode,\n        decodeEntities: this._decodeEntities\n    }, this._cbs);\n};\nTokenizer.prototype.getAbsoluteIndex = function() {\n    return this._bufferOffset + this._index;\n};\nTokenizer.prototype._getSection = function() {\n    return this._buffer.substring(this._sectionStart, this._index);\n};\nTokenizer.prototype._emitToken = function(name) {\n    this._cbs[name](this._getSection());\n    this._sectionStart = -1;\n};\nTokenizer.prototype._emitPartial = function(value) {\n    if (this._baseState !== TEXT) {\n        this._cbs.onattribdata(value); //TODO implement the new event\n    } else {\n        this._cbs.ontext(value);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/WritableStream.js":
/*!********************************************************!*\
  !*** ./node_modules/htmlparser2/lib/WritableStream.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = Stream;\nvar Parser = __webpack_require__(/*! ./Parser.js */ \"(ssr)/./node_modules/htmlparser2/lib/Parser.js\");\nvar WritableStream = (__webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\").Writable);\nvar StringDecoder = (__webpack_require__(/*! string_decoder */ \"string_decoder\").StringDecoder);\nvar Buffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\nfunction Stream(cbs, options) {\n    var parser = this._parser = new Parser(cbs, options);\n    var decoder = this._decoder = new StringDecoder();\n    WritableStream.call(this, {\n        decodeStrings: false\n    });\n    this.once(\"finish\", function() {\n        parser.end(decoder.end());\n    });\n}\n__webpack_require__(/*! inherits */ \"(ssr)/./node_modules/inherits/inherits.js\")(Stream, WritableStream);\nStream.prototype._write = function(chunk, encoding, cb) {\n    if (chunk instanceof Buffer) chunk = this._decoder.write(chunk);\n    this._parser.write(chunk);\n    cb();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1dyaXRhYmxlU3RyZWFtLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixJQUFJQyxTQUFTQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUNsQyxJQUFJQyxpQkFBaUJELHlHQUFtQztBQUN4RCxJQUFJRyxnQkFBZ0JILDJFQUF1QztBQUMzRCxJQUFJSSxTQUFTSixvREFBd0I7QUFFckMsU0FBU0YsT0FBT08sR0FBRyxFQUFFQyxPQUFPO0lBQ3hCLElBQUlDLFNBQVUsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSVQsT0FBT00sS0FBS0M7SUFDN0MsSUFBSUcsVUFBVyxJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJUDtJQUVuQ0YsZUFBZVUsSUFBSSxDQUFDLElBQUksRUFBRTtRQUFFQyxlQUFlO0lBQU07SUFFakQsSUFBSSxDQUFDQyxJQUFJLENBQUMsVUFBVTtRQUNoQk4sT0FBT08sR0FBRyxDQUFDTCxRQUFRSyxHQUFHO0lBQzFCO0FBQ0o7QUFFQWQsbUJBQU9BLENBQUMsMkRBQVUsRUFBRUYsUUFBUUc7QUFFNUJILE9BQU9pQixTQUFTLENBQUNDLE1BQU0sR0FBRyxTQUFTQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsRUFBRTtJQUNsRCxJQUFJRixpQkFBaUJiLFFBQVFhLFFBQVEsSUFBSSxDQUFDUCxRQUFRLENBQUNVLEtBQUssQ0FBQ0g7SUFDekQsSUFBSSxDQUFDVCxPQUFPLENBQUNZLEtBQUssQ0FBQ0g7SUFDbkJFO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b3JjaF9wcm9qZWN0Ly4vbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9Xcml0YWJsZVN0cmVhbS5qcz8xYzZmIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgUGFyc2VyID0gcmVxdWlyZShcIi4vUGFyc2VyLmpzXCIpO1xudmFyIFdyaXRhYmxlU3RyZWFtID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKS5Xcml0YWJsZTtcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZShcInN0cmluZ19kZWNvZGVyXCIpLlN0cmluZ0RlY29kZXI7XG52YXIgQnVmZmVyID0gcmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIFN0cmVhbShjYnMsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGFyc2VyID0gKHRoaXMuX3BhcnNlciA9IG5ldyBQYXJzZXIoY2JzLCBvcHRpb25zKSk7XG4gICAgdmFyIGRlY29kZXIgPSAodGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKCkpO1xuXG4gICAgV3JpdGFibGVTdHJlYW0uY2FsbCh0aGlzLCB7IGRlY29kZVN0cmluZ3M6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5vbmNlKFwiZmluaXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBwYXJzZXIuZW5kKGRlY29kZXIuZW5kKCkpO1xuICAgIH0pO1xufVxuXG5yZXF1aXJlKFwiaW5oZXJpdHNcIikoU3RyZWFtLCBXcml0YWJsZVN0cmVhbSk7XG5cblN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIEJ1ZmZlcikgY2h1bmsgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICB0aGlzLl9wYXJzZXIud3JpdGUoY2h1bmspO1xuICAgIGNiKCk7XG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJTdHJlYW0iLCJQYXJzZXIiLCJyZXF1aXJlIiwiV3JpdGFibGVTdHJlYW0iLCJXcml0YWJsZSIsIlN0cmluZ0RlY29kZXIiLCJCdWZmZXIiLCJjYnMiLCJvcHRpb25zIiwicGFyc2VyIiwiX3BhcnNlciIsImRlY29kZXIiLCJfZGVjb2RlciIsImNhbGwiLCJkZWNvZGVTdHJpbmdzIiwib25jZSIsImVuZCIsInByb3RvdHlwZSIsIl93cml0ZSIsImNodW5rIiwiZW5jb2RpbmciLCJjYiIsIndyaXRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/WritableStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/htmlparser2/lib/index.js":
/*!***********************************************!*\
  !*** ./node_modules/htmlparser2/lib/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar Parser = __webpack_require__(/*! ./Parser.js */ \"(ssr)/./node_modules/htmlparser2/lib/Parser.js\");\nvar DomHandler = __webpack_require__(/*! domhandler */ \"(ssr)/./node_modules/domhandler/index.js\");\nfunction defineProp(name, value) {\n    delete module.exports[name];\n    module.exports[name] = value;\n    return value;\n}\nmodule.exports = {\n    Parser: Parser,\n    Tokenizer: __webpack_require__(/*! ./Tokenizer.js */ \"(ssr)/./node_modules/htmlparser2/lib/Tokenizer.js\"),\n    ElementType: __webpack_require__(/*! domelementtype */ \"(ssr)/./node_modules/domelementtype/index.js\"),\n    DomHandler: DomHandler,\n    get FeedHandler () {\n        return defineProp(\"FeedHandler\", __webpack_require__(/*! ./FeedHandler.js */ \"(ssr)/./node_modules/htmlparser2/lib/FeedHandler.js\"));\n    },\n    get Stream () {\n        return defineProp(\"Stream\", __webpack_require__(/*! ./Stream.js */ \"(ssr)/./node_modules/htmlparser2/lib/Stream.js\"));\n    },\n    get WritableStream () {\n        return defineProp(\"WritableStream\", __webpack_require__(/*! ./WritableStream.js */ \"(ssr)/./node_modules/htmlparser2/lib/WritableStream.js\"));\n    },\n    get ProxyHandler () {\n        return defineProp(\"ProxyHandler\", __webpack_require__(/*! ./ProxyHandler.js */ \"(ssr)/./node_modules/htmlparser2/lib/ProxyHandler.js\"));\n    },\n    get DomUtils () {\n        return defineProp(\"DomUtils\", __webpack_require__(/*! domutils */ \"(ssr)/./node_modules/domutils/index.js\"));\n    },\n    get CollectingHandler () {\n        return defineProp(\"CollectingHandler\", __webpack_require__(/*! ./CollectingHandler.js */ \"(ssr)/./node_modules/htmlparser2/lib/CollectingHandler.js\"));\n    },\n    // For legacy support\n    DefaultHandler: DomHandler,\n    get RssHandler () {\n        return defineProp(\"RssHandler\", this.FeedHandler);\n    },\n    //helper methods\n    parseDOM: function(data, options) {\n        var handler = new DomHandler(options);\n        new Parser(handler, options).end(data);\n        return handler.dom;\n    },\n    parseFeed: function(feed, options) {\n        var handler = new module.exports.FeedHandler(options);\n        new Parser(handler, options).end(feed);\n        return handler.dom;\n    },\n    createDomStream: function(cb, options, elementCb) {\n        var handler = new DomHandler(cb, options, elementCb);\n        return new Parser(handler, options);\n    },\n    // List of all events that the parser emits\n    EVENTS: {\n        /* Format: eventname: number of arguments */ attribute: 2,\n        cdatastart: 0,\n        cdataend: 0,\n        text: 1,\n        processinginstruction: 2,\n        comment: 1,\n        commentend: 0,\n        closetag: 1,\n        opentag: 2,\n        opentagname: 1,\n        error: 1,\n        end: 0\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQyxtRUFBYTtBQUNsQyxJQUFJQyxhQUFhRCxtQkFBT0EsQ0FBQyw0REFBWTtBQUVyQyxTQUFTRSxXQUFXQyxJQUFJLEVBQUVDLEtBQUs7SUFDM0IsT0FBT0MsT0FBT0MsT0FBTyxDQUFDSCxLQUFLO0lBQzNCRSxPQUFPQyxPQUFPLENBQUNILEtBQUssR0FBR0M7SUFDdkIsT0FBT0E7QUFDWDtBQUVBQyxPQUFPQyxPQUFPLEdBQUc7SUFDYlAsUUFBUUE7SUFDUlEsV0FBV1AsbUJBQU9BLENBQUMseUVBQWdCO0lBQ25DUSxhQUFhUixtQkFBT0EsQ0FBQyxvRUFBZ0I7SUFDckNDLFlBQVlBO0lBQ1osSUFBSVEsZUFBYztRQUNkLE9BQU9QLFdBQVcsZUFBZUYsbUJBQU9BLENBQUMsNkVBQWtCO0lBQy9EO0lBQ0EsSUFBSVUsVUFBUztRQUNULE9BQU9SLFdBQVcsVUFBVUYsbUJBQU9BLENBQUMsbUVBQWE7SUFDckQ7SUFDQSxJQUFJVyxrQkFBaUI7UUFDakIsT0FBT1QsV0FBVyxrQkFBa0JGLG1CQUFPQSxDQUFDLG1GQUFxQjtJQUNyRTtJQUNBLElBQUlZLGdCQUFlO1FBQ2YsT0FBT1YsV0FBVyxnQkFBZ0JGLG1CQUFPQSxDQUFDLCtFQUFtQjtJQUNqRTtJQUNBLElBQUlhLFlBQVc7UUFDWCxPQUFPWCxXQUFXLFlBQVlGLG1CQUFPQSxDQUFDLHdEQUFVO0lBQ3BEO0lBQ0EsSUFBSWMscUJBQW9CO1FBQ3BCLE9BQU9aLFdBQ0gscUJBQ0FGLG1CQUFPQSxDQUFDLHlGQUF3QjtJQUV4QztJQUNBLHFCQUFxQjtJQUNyQmUsZ0JBQWdCZDtJQUNoQixJQUFJZSxjQUFhO1FBQ2IsT0FBT2QsV0FBVyxjQUFjLElBQUksQ0FBQ08sV0FBVztJQUNwRDtJQUNBLGdCQUFnQjtJQUNoQlEsVUFBVSxTQUFTQyxJQUFJLEVBQUVDLE9BQU87UUFDNUIsSUFBSUMsVUFBVSxJQUFJbkIsV0FBV2tCO1FBQzdCLElBQUlwQixPQUFPcUIsU0FBU0QsU0FBU0UsR0FBRyxDQUFDSDtRQUNqQyxPQUFPRSxRQUFRRSxHQUFHO0lBQ3RCO0lBQ0FDLFdBQVcsU0FBU0MsSUFBSSxFQUFFTCxPQUFPO1FBQzdCLElBQUlDLFVBQVUsSUFBSWYsT0FBT0MsT0FBTyxDQUFDRyxXQUFXLENBQUNVO1FBQzdDLElBQUlwQixPQUFPcUIsU0FBU0QsU0FBU0UsR0FBRyxDQUFDRztRQUNqQyxPQUFPSixRQUFRRSxHQUFHO0lBQ3RCO0lBQ0FHLGlCQUFpQixTQUFTQyxFQUFFLEVBQUVQLE9BQU8sRUFBRVEsU0FBUztRQUM1QyxJQUFJUCxVQUFVLElBQUluQixXQUFXeUIsSUFBSVAsU0FBU1E7UUFDMUMsT0FBTyxJQUFJNUIsT0FBT3FCLFNBQVNEO0lBQy9CO0lBQ0EsMkNBQTJDO0lBQzNDUyxRQUFRO1FBQ0osMENBQTBDLEdBQzFDQyxXQUFXO1FBQ1hDLFlBQVk7UUFDWkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLHVCQUF1QjtRQUN2QkMsU0FBUztRQUNUQyxZQUFZO1FBQ1pDLFVBQVU7UUFDVkMsU0FBUztRQUNUQyxhQUFhO1FBQ2JDLE9BQU87UUFDUGxCLEtBQUs7SUFDVDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG9yY2hfcHJvamVjdC8uL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvaW5kZXguanM/MDAzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgUGFyc2VyID0gcmVxdWlyZShcIi4vUGFyc2VyLmpzXCIpO1xudmFyIERvbUhhbmRsZXIgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcblxuZnVuY3Rpb24gZGVmaW5lUHJvcChuYW1lLCB2YWx1ZSkge1xuICAgIGRlbGV0ZSBtb2R1bGUuZXhwb3J0c1tuYW1lXTtcbiAgICBtb2R1bGUuZXhwb3J0c1tuYW1lXSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUGFyc2VyOiBQYXJzZXIsXG4gICAgVG9rZW5pemVyOiByZXF1aXJlKFwiLi9Ub2tlbml6ZXIuanNcIiksXG4gICAgRWxlbWVudFR5cGU6IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKSxcbiAgICBEb21IYW5kbGVyOiBEb21IYW5kbGVyLFxuICAgIGdldCBGZWVkSGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXCJGZWVkSGFuZGxlclwiLCByZXF1aXJlKFwiLi9GZWVkSGFuZGxlci5qc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIlN0cmVhbVwiLCByZXF1aXJlKFwiLi9TdHJlYW0uanNcIikpO1xuICAgIH0sXG4gICAgZ2V0IFdyaXRhYmxlU3RyZWFtKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIldyaXRhYmxlU3RyZWFtXCIsIHJlcXVpcmUoXCIuL1dyaXRhYmxlU3RyZWFtLmpzXCIpKTtcbiAgICB9LFxuICAgIGdldCBQcm94eUhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiUHJveHlIYW5kbGVyXCIsIHJlcXVpcmUoXCIuL1Byb3h5SGFuZGxlci5qc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgRG9tVXRpbHMoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiRG9tVXRpbHNcIiwgcmVxdWlyZShcImRvbXV0aWxzXCIpKTtcbiAgICB9LFxuICAgIGdldCBDb2xsZWN0aW5nSGFuZGxlcigpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXG4gICAgICAgICAgICBcIkNvbGxlY3RpbmdIYW5kbGVyXCIsXG4gICAgICAgICAgICByZXF1aXJlKFwiLi9Db2xsZWN0aW5nSGFuZGxlci5qc1wiKVxuICAgICAgICApO1xuICAgIH0sXG4gICAgLy8gRm9yIGxlZ2FjeSBzdXBwb3J0XG4gICAgRGVmYXVsdEhhbmRsZXI6IERvbUhhbmRsZXIsXG4gICAgZ2V0IFJzc0hhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiUnNzSGFuZGxlclwiLCB0aGlzLkZlZWRIYW5kbGVyKTtcbiAgICB9LFxuICAgIC8vaGVscGVyIG1ldGhvZHNcbiAgICBwYXJzZURPTTogZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBEb21IYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChkYXRhKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuZG9tO1xuICAgIH0sXG4gICAgcGFyc2VGZWVkOiBmdW5jdGlvbihmZWVkLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gbmV3IG1vZHVsZS5leHBvcnRzLkZlZWRIYW5kbGVyKG9wdGlvbnMpO1xuICAgICAgICBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpLmVuZChmZWVkKTtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIuZG9tO1xuICAgIH0sXG4gICAgY3JlYXRlRG9tU3RyZWFtOiBmdW5jdGlvbihjYiwgb3B0aW9ucywgZWxlbWVudENiKSB7XG4gICAgICAgIHZhciBoYW5kbGVyID0gbmV3IERvbUhhbmRsZXIoY2IsIG9wdGlvbnMsIGVsZW1lbnRDYik7XG4gICAgICAgIHJldHVybiBuZXcgUGFyc2VyKGhhbmRsZXIsIG9wdGlvbnMpO1xuICAgIH0sXG4gICAgLy8gTGlzdCBvZiBhbGwgZXZlbnRzIHRoYXQgdGhlIHBhcnNlciBlbWl0c1xuICAgIEVWRU5UUzoge1xuICAgICAgICAvKiBGb3JtYXQ6IGV2ZW50bmFtZTogbnVtYmVyIG9mIGFyZ3VtZW50cyAqL1xuICAgICAgICBhdHRyaWJ1dGU6IDIsXG4gICAgICAgIGNkYXRhc3RhcnQ6IDAsXG4gICAgICAgIGNkYXRhZW5kOiAwLFxuICAgICAgICB0ZXh0OiAxLFxuICAgICAgICBwcm9jZXNzaW5naW5zdHJ1Y3Rpb246IDIsXG4gICAgICAgIGNvbW1lbnQ6IDEsXG4gICAgICAgIGNvbW1lbnRlbmQ6IDAsXG4gICAgICAgIGNsb3NldGFnOiAxLFxuICAgICAgICBvcGVudGFnOiAyLFxuICAgICAgICBvcGVudGFnbmFtZTogMSxcbiAgICAgICAgZXJyb3I6IDEsXG4gICAgICAgIGVuZDogMFxuICAgIH1cbn07XG4iXSwibmFtZXMiOlsiUGFyc2VyIiwicmVxdWlyZSIsIkRvbUhhbmRsZXIiLCJkZWZpbmVQcm9wIiwibmFtZSIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRva2VuaXplciIsIkVsZW1lbnRUeXBlIiwiRmVlZEhhbmRsZXIiLCJTdHJlYW0iLCJXcml0YWJsZVN0cmVhbSIsIlByb3h5SGFuZGxlciIsIkRvbVV0aWxzIiwiQ29sbGVjdGluZ0hhbmRsZXIiLCJEZWZhdWx0SGFuZGxlciIsIlJzc0hhbmRsZXIiLCJwYXJzZURPTSIsImRhdGEiLCJvcHRpb25zIiwiaGFuZGxlciIsImVuZCIsImRvbSIsInBhcnNlRmVlZCIsImZlZWQiLCJjcmVhdGVEb21TdHJlYW0iLCJjYiIsImVsZW1lbnRDYiIsIkVWRU5UUyIsImF0dHJpYnV0ZSIsImNkYXRhc3RhcnQiLCJjZGF0YWVuZCIsInRleHQiLCJwcm9jZXNzaW5naW5zdHJ1Y3Rpb24iLCJjb21tZW50IiwiY29tbWVudGVuZCIsImNsb3NldGFnIiwib3BlbnRhZyIsIm9wZW50YWduYW1lIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/htmlparser2/lib/index.js\n");

/***/ })

};
;